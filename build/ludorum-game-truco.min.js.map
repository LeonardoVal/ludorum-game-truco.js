{"version":3,"sources":["../src/__prologue__.js","../src/Truco.js","../src/ai/SubTruco.js","../src/__epilogue__.js"],"names":["__init__","base","Sermat","ludorum","declare","Game","raise","raiseIf","Iterable","iterable","exports","players","UserInterface","__package__","__name__","__dependencies__","__SERMAT__","include","ai","Truco","name","constructor","activePlayer","call","this","moves","result","next","haps","update","static __SERMAT__","identifier","serializer","obj","push","SubTruco"],"mappings":";;yTAEA,SAASA,EAASC,EAAMC,EAAQC,GAAW,aAE1C,IAAIC,EAAUH,EAAKG,QAKlBC,GAJQJ,EAAKK,MACHL,EAAKM,QACJN,EAAKO,SACLP,EAAKQ,SACTN,EAAQE,MAIZK,GAHaP,EAAQQ,QAAQC,eAIhCC,YAAa,qBACbC,SAAU,qBACVd,SAAUA,EACVe,kBAAmBd,EAAMC,EAAQC,GACjCa,YAAcC,SAAUhB,EAAME,IAK9Be,QCnBEC,EAAQT,EAAQS,MAAQf,EAAQC,GACnCe,KAAM,QAINC,YAAa,SAAeC,GAC3BjB,EAAKkB,KAAKC,KAAMF,IAMjBX,SAAS,OAAS,QAMlBc,MAAO,WACN,OAAO,MAKRC,OAAQ,WACP,OAAO,MAKRC,KAAM,SAAcF,EAAOG,EAAMC,GAChC,OAAO,MAQRC,qBACCC,WAAYrB,EAAQG,YAAY,SAChCmB,WAAY,SAA2BC,GACtC,OAAQA,EAAIX,oBASfZ,EAAQM,WAAWC,QAAQiB,KAAKf,GAChCjB,EAAOe,QAAQP,GCpDf,IAAIyB,EAAWzB,EAAQQ,GAAGiB,SAAW/B,EAAQC,GAC5Ce,KAAM,QAINC,YAAa,SAAkBC,GAC9BjB,EAAKkB,KAAKC,KAAMF,IAMjBX,SAAS,OAAS,QAMlBc,MAAO,WACN,OAAO,MAKRC,OAAQ,WACP,OAAO,MAKRC,KAAM,SAAcF,EAAOG,EAAMC,GAChC,OAAO,MAQRC,qBACCC,WAAYrB,EAAQG,YAAY,YAChCmB,WAAY,SAA2BC,GACtC,OAAQA,EAAIX,oBC3Cd,ODoDDZ,EAAQM,WAAWC,QAAQiB,KAAKC,GAChCjC,EAAOe,QAAQP,GCvDdR,EAAOe,QAAQP,GAERA","file":"ludorum-game-truco.min.js","sourcesContent":["/** Package wrapper and layout.\n*/\nfunction __init__(base, Sermat, ludorum) { \"use strict\";\n// Import synonyms. ////////////////////////////////////////////////////////////////////////////////\n\tvar declare = base.declare,\n\t\traise = base.raise,\n\t\traiseIf = base.raiseIf,\n\t\tIterable = base.Iterable,\n\t\titerable = base.iterable,\n\t\tGame = ludorum.Game,\n\t\tUserInterface = ludorum.players.UserInterface;\n\n// Library layout. /////////////////////////////////////////////////////////////////////////////////\n\tvar exports = {\n\t\t__package__: 'ludorum-game-truco',\n\t\t__name__: 'ludorum_game_truco',\n\t\t__init__: __init__,\n\t\t__dependencies__: [base, Sermat, ludorum],\n\t\t__SERMAT__: { include: [base, ludorum] },\n\n\t\t/** The `ai` is the namespace used for functions and definitions relating to artificial\n\t\tintelligence.\n\t\t*/\n\t\tai: { }\n\t};\n","/** # Truco base\n\nBase abstract class for implementations of variants of the Truco card game.\n*/\nvar Truco = exports.Truco = declare(Game, {\n\tname: 'Truco',\n\n\t/** TODO\n\t*/\n\tconstructor: function Truco(activePlayer){\n\t\tGame.call(this, activePlayer);\n\t\t// initialization\n\t},\n\n\t/** The players' roles in a Truco match are `\"Hand\"` (_Mano_) and `\"Foot\"` (_Pie_).\n\t*/\n\tplayers: [\"Hand\", \"Foot\"],\n\n\t// ## Game logic ###############################################################################\n\n\t/** TODO\n\t*/\n\tmoves: function moves(){\n\t\treturn null;\n\t},\n\n\t/** TODO\n\t*/\n\tresult: function result() {\n\t\treturn null;\n\t},\n\n\t/** TODO\n\t*/\n\tnext: function next(moves, haps, update) {\n\t\treturn null;\n\t},\n\n\t// ## Utility methods ##########################################################################\n\n\t/** Serialization is used in the `toString()` method, but it is also vital for sending the game\n\tstate across a network or the marshalling between the rendering thread and a webworker.\n\t*/\n\t'static __SERMAT__': {\n\t\tidentifier: exports.__package__ +'.Truco',\n\t\tserializer: function serialize_Mancala(obj) {\n\t\t\treturn [obj.activePlayer()];\n\t\t}\n\t}\n}); // declare Truco.\n\n// ## Truco type initialization ####################################################################\n\n/** Sermat serialization.\n*/\nexports.__SERMAT__.include.push(Truco);\nSermat.include(exports);","/** # SubTruco\n\nSimplified version of the _truco_ subgame of the Truco card game, made to investigate the game.\n*/\nvar SubTruco = exports.ai.SubTruco = declare(Game, {\n\tname: 'Truco',\n\n\t/** TODO\n\t*/\n\tconstructor: function SubTruco(activePlayer){\n\t\tGame.call(this, activePlayer);\n\t\t// initialization\n\t},\n\n\t/** The players' roles in a Truco match are `\"Hand\"` (_Mano_) and `\"Foot\"` (_Pie_).\n\t*/\n\tplayers: [\"Hand\", \"Foot\"],\n\n\t// ## Game logic ###############################################################################\n\n\t/** TODO\n\t*/\n\tmoves: function moves(){\n\t\treturn null;\n\t},\n\n\t/** TODO\n\t*/\n\tresult: function result() {\n\t\treturn null;\n\t},\n\n\t/** TODO\n\t*/\n\tnext: function next(moves, haps, update) {\n\t\treturn null;\n\t},\n\n\t// ## Utility methods ##########################################################################\n\n\t/** Serialization is used in the `toString()` method, but it is also vital for sending the game\n\tstate across a network or the marshalling between the rendering thread and a webworker.\n\t*/\n\t'static __SERMAT__': {\n\t\tidentifier: exports.__package__ +'.SubTruco',\n\t\tserializer: function serialize_Mancala(obj) {\n\t\t\treturn [obj.activePlayer()];\n\t\t}\n\t}\n}); // declare Truco.\n\n// ## Truco type initialization ####################################################################\n\n/** Sermat serialization.\n*/\nexports.__SERMAT__.include.push(SubTruco);\nSermat.include(exports);","// See __prologue__.js\n\tSermat.include(exports);\n\t\n\treturn exports;\n}\n"]}