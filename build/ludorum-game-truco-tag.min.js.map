{"version":3,"sources":["../src/__prologue__.js","../src/common.js","../src/Truco.js","../src/ai/SubTruco.js","../src/ai/ChallengedTruco.js","../src/__epilogue__.js"],"names":["__init__","base","Sermat","ludorum","declare","Game","raise","raiseIf","Iterable","iterable","exports","players","UserInterface","__package__","__name__","__dependencies__","__SERMAT__","include","ai","envidoTotal","cards","a","envido","b","c","Math","max","valor","numA","numB","Truco","name","constructor","activePlayer","call","this","moves","result","next","haps","update","static __SERMAT__","identifier","serializer","obj","push","SubTruco","table","cardsHand","cardsFoot","length","map","_","i","__tableResults__","r","sign","tableResultSum","tableResults","victory","that","clone","move","splice","activatePlayers","opponent","slice","toChar","n","toString","join","static CARDS","static enumerateCards","It","product","apply","repeat","range","toArray","filter","sortedCards","sort","test","ChallengedTruco","globalScore","envidoStack","envidoGoing","trucoStack","trucoGoing","canUpChallenge","getEnvidoChallenge","trucoChall","getTrucoChallenge","prototype","CHALLENGES","Quiero","NoQuiero","Array","envidoResponses","trucoResponses","envidoChallenge","envidoStackWorth","ChallgruengedTruco","ValeCuatro","trucoChallenge","trucoStackWorth","ReTruco","Envido","RealEnvido","FaltaEnvido","cloned_game","wanted","notWanted","faltaEnvidoScore","envidoChall","possibleMoves","handGlobal","footGlobal","static CHALLENGES"],"mappings":"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","file":"ludorum-game-truco-tag.min.js","sourcesContent":["/** Package wrapper and layout.\n*/\nfunction __init__(base, Sermat, ludorum) { \"use strict\";\n// Import synonyms. ////////////////////////////////////////////////////////////////////////////////\n\tvar declare = base.declare,\n\t\traise = base.raise,\n\t\traiseIf = base.raiseIf,\n\t\tIterable = base.Iterable,\n\t\titerable = base.iterable,\n\t\tGame = ludorum.Game,\n\t\tUserInterface = ludorum.players.UserInterface;\n\n// Library layout. /////////////////////////////////////////////////////////////////////////////////\n\tvar exports = {\n\t\t__package__: 'ludorum-game-truco',\n\t\t__name__: 'ludorum_game_truco',\n\t\t__init__: __init__,\n\t\t__dependencies__: [base, Sermat, ludorum],\n\t\t__SERMAT__: { include: [base, ludorum] },\n\n\t\t/** The `ai` is the namespace used for functions and definitions relating to artificial\n\t\tintelligence.\n\t\t*/\n\t\tai: { }\n\t};\n","/** # Common functions and utilities.\n\nTODO\n*/\n\n/**\n * A card move is represented by an object with a player (who throws the card)\n * and a number, which is the index of the thrown card\n *\n * Note that cards are sorted in ascending order so index is consistent\n */\n\n/**\n * Funcion que recibe por parametro la mano actual de un jugador, y retorna los posibles movimientos.\n */\n\nfunction generateMoves(cards) {\n    var moves = [];\n    for (var i = 0; i < cards.length; i++) {\n        moves.push(i);\n    }\n    return moves;\n}\n\nfunction arrEq(a, b) {\n    if (a === b) return true;\n    if (a == null || b == null) return false;\n    if (a.length != b.length) return false;\n\n    // If you don't care about the order of the elements inside\n    // the array, you should sort both arrays here.\n\n    for (var i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n}\n\nfunction envidoTotal(cards) {\n    var a = envido(cards[0], cards[1]);\n    var b = envido(cards[0], cards[2]);\n    var c = envido(cards[1], cards[2]);\n\n    return Math.max(a, b, c);\n}\n\n/**\n * Cada carta se representa con un entero del 0 al 39.\n *\n * Dado que hay 10 cartas de cada palo, y son 4 palos,\n * el palo de una carta n es n mod 4.\n *\n * Su número es n // 4 + 1 (para hacerlo de 1 a 10).\n *\n * PALOS\n * 0 - Espada\n * 1 - Basto\n * 2 - Oro\n * 3 - Copa\n *\n * CARTAS\n * 1..7 - 1..7\n * 8 - 10\n * 9 - 11\n * 10 - 12\n */\n\nfunction envido(a, b) {\n    var valor = (a % 4) == (b % 4) ? 20 : 0;\n    var numA = ~~(a / 4) + 1;\n    var numB = ~~(b / 4) + 1;\n    if (numA < 8) {\n        valor += numA;\n    }\n    if (numB < 8) {\n        valor += numB;\n    }\n    return valor;\n}","/** # Truco base\n\nBase abstract class for implementations of variants of the Truco card game.\n*/\nvar Truco = exports.Truco = declare(Game, {\n\tname: 'Truco',\n\n\t/** TODO\n\t*/\n\tconstructor: function Truco(activePlayer){\n\t\tGame.call(this, activePlayer);\n\t\t// initialization\n\t},\n\n\t/** The players' roles in a Truco match are `\"Hand\"` (_Mano_) and `\"Foot\"` (_Pie_).\n\t*/\n\tplayers: [\"Hand\", \"Foot\"],\n\n\t// ## Game logic ###############################################################################\n\n\t/** TODO\n\t*/\n\tmoves: function moves(){\n\t\treturn null;\n\t},\n\n\t/** TODO\n\t*/\n\tresult: function result() {\n\t\treturn null;\n\t},\n\n\t/** TODO\n\t*/\n\tnext: function next(moves, haps, update) {\n\t\treturn null;\n\t},\n\n\t// ## Utility methods ##########################################################################\n\n\t/** Serialization is used in the `toString()` method, but it is also vital for sending the game\n\tstate across a network or the marshalling between the rendering thread and a webworker.\n\t*/\n\t'static __SERMAT__': {\n\t\tidentifier: exports.__package__ +'.Truco',\n\t\tserializer: function serialize_Mancala(obj) {\n\t\t\treturn [obj.activePlayer()];\n\t\t}\n\t}\n}); // declare Truco.\n\n// ## Truco type initialization ####################################################################\n\n/** Sermat serialization.\n*/\nexports.__SERMAT__.include.push(Truco);\nSermat.include(exports);","/** # SubTruco\n\nSimplified version of the _truco_ subgame of the Truco card game, made to investigate the game.\n*/\n\nvar SubTruco = exports.ai.SubTruco = declare(Game, {\n\tname: 'SubTruco',\n\n\t/** The constructor takes:\n\t+ `table`: An array with the cards on the table,\n\t+ `cardsHand`: An array with the cards on the first player's hand,\n\t+ `cardsFoot`: An array with the cards on the second player's hand.\n\t*/\n\tconstructor: function SubTruco(table, cardsHand, cardsFoot) {\n\t\tGame.call(this, this.players[table.length % 2]);\n\t\tthis.table = table;\n\t\tthis.cardsHand = cardsHand;\n\t\tthis.cardsFoot = cardsFoot;\n\t},\n\n\t/** The players' roles in a Truco match are `\"Hand\"` (_Mano_) and `\"Foot\"` (_Pie_).\n\t*/\n\tplayers: [\"Hand\", \"Foot\"],\n\n\t// ## Game logic ###############################################################################\n\n\t/** A move for `SubTruco` is simply the index for the card to be played in the active player's\n\thand.\n\t*/\n\tmoves: function moves() {\n\t\tvar moves = this.result() ? null : {};\n\t\tif (moves) {\n\t\t\tvar cards = this.activePlayer() === 'Hand' ? this.cardsHand : this.cardsFoot;\n\t\t\tmoves[this.activePlayer()] = cards.map((_, i) => i);\n\t\t}\n\t\treturn moves;\n\t},\n\n\t/** The table results are the matches between the cards of each player in the table.\n\t*/\n\t__tableResults__: function __tableResults__() {\n\t\tvar r = [];\n\t\tfor (var i = 0; i < this.table.length; i += 2) {\n\t\t\tr.push(Math.sign(this.table[i] - this.table[i+1]));\n\t\t}\n\t\treturn r;\n\t},\n\n\t/** The round may end when both players have played two cards, if one player wins both card\n\tmatches or wins one with the other being tied. The round must end when both players have played\n\tall their three cards. If the last card match is tied, the player that won the first card match\n\twins. If all three card matches are tied, the _Hand_ player wins.\n\t*/\n\tresult: function result() {\n\t\tvar tableResults = this.__tableResults__(),\n\t\t\ttableResultSum;\n\t\tif (tableResults.length == 2) {\n\t\t\ttableResultSum = tableResults[0] + tableResults[1];\n\t\t\tif (tableResultSum > 0) {\n\t\t\t\treturn this.victory('Hand');\n\t\t\t} else if (tableResultSum < 0) {\n\t\t\t\treturn this.victory('Foot');\n\t\t\t}\n\t\t} else if (tableResults.length === 3) {\n\t\t\ttableResultSum = tableResults[0] + tableResults[1] + tableResults[2];\n\t\t\tif (tableResultSum > 0 || tableResultSum === 0 && tableResults[0] >= 0) {\n\t\t\t\treturn this.victory('Hand');\n\t\t\t} else if (tableResultSum < 0 || tableResultSum === 0 && tableResults[0] < 0) {\n\t\t\t\treturn this.victory('Foot');\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t},\n\n\t/** TODO\n\t*/\n\tnext: function next(moves, haps, update) {\n\t\tbase.raiseIf(this.result(), \"Game is finished!\");\n\t\tvar that = update ? this : this.clone(),\n\t\t\tactivePlayer = this.activePlayer(),\n\t\t\tmove = +moves[activePlayer],\n\t\t\tcards = that['cards'+ activePlayer];\n\t\tbase.raiseIf(move < 0 || move >= cards.length, 'Invalid move ', move, 'at', that, '!');\n\t\tthat.table.push(cards[move]);\n\t\tcards.splice(move, 1);\n\t\tthat.activatePlayers(this.opponent());\n\t\treturn that;\n\t},\n\n\t// ## Utility methods #########################################################################\n\n\tclone: function clone() {\n\t\treturn new this.constructor(this.table.slice(), this.cardsHand.slice(),\n\t\t\tthis.cardsFoot.slice());\n\t},\n\n\t/** The string `identifier` for a `SubTruco` state always has 7 characters. The first one\n\tindicates the number of cards on the table. Then come the cards on the table, each encoded as\n\ta character (base 36). After that come the cards of the _Hand_ player, and finally the ones of\n\tthe _Foot_ player, both encoded in the same way as the cards on the table.\n\t*/\n\tidentifier: function identifier() {\n\t\tvar toChar = (n) => (n - 1).toString(36);\n\t\treturn this.table.length + this.table.map(toChar).join('') +\n\t\t\tthis.cardsHand.map(toChar).join('') +\n\t\t\tthis.cardsFoot.map(toChar).join('');\n\t},\n\n\t/** For this game suits are relevant only in the case of the sevens and the aces. Hence, cards\n\tare encoded using numbers from 1 to 14. How each number may map to a given card is defined in\n\t`CARDS`. Here the french deck's suits are used instead of the spanish deck's ones (because the\n\tlatter are not supported by Unicode). Spades and clubs are the same, diamonds are used for\n\tgolds and hearts for cups.\n\t*/\n\t'static CARDS': [\n\t\t[],                    //  0: Invalid.\n\t\t['4♦','4♥','4♠','4♣'], //  1: All fours.\n\t\t['5♦','5♥','5♠','5♣'], //  2: All fives.\n\t\t['6♦','6♥','6♠','6♣'], //  3: All sixes.\n\t\t['7♥','7♣'],           //  4: Sevens of hearts (cups) and clubs.\n\t\t['A♦','A♥','A♠','A♣'], //  5: All jacks (10s).\n\t\t['B♦','B♥','B♠','B♣'], //  6: All knights (11s).\n\t\t['C♦','C♥','C♠','C♣'], //  7: All kings (12s).\n\t\t['1♦','1♥'],           //  8: Aces of diamonds (golds) and hearts (cups).\n\t\t['2♦','2♥','2♠','2♣'], //  9: All twos.\n\t\t['3♦','3♥','3♠','3♣'], // 10: All threes.\n\t\t['7♦'],                // 11: Seven of diamonds (golds).\n\t\t['7♠'],                // 12: Seven of spades.\n\t\t['1♣'],                // 13: Ace of clubs.\n\t\t['1♠']                 // 14: Ace of spades.\n\t],\n\n\t/** The `enumerateCards` function returns an iterable of all possible hands for `SubTruco`. The\n\torder of the cards in each players' hand is not relevant. The amount of possible cards is\n\tchecked by means of a regular expression.\n\t*/\n\t'static enumerateCards': function enumerateCards() {\n\t\tvar It = base.Iterable,\n\t\t\tbaseSequence = It.product.apply(It, It.repeat(It.range(1,14), 6).toArray());\n\t\treturn baseSequence.filter(function (cards) {\n\t\t\tcards = cards.map((n) => n.toString(36));\n\t\t\tvar cardsHand = cards.slice(0, 3),\n\t\t\t\tcardsFoot = cards.slice(3, 6),\n\t\t\t\tsortedCards = cards.sort().join(''),\n\t\t\t\tamountsRegExp = /([1235679a])\\1{4,}|444+|888+|bb+|cc+|dd+|ee+/;\n\t\t\treturn cardsHand.join('') === cardsHand.sort().join('') &&\n\t\t\t\tcardsFoot.join('') === cardsFoot.sort().join('') &&\n\t\t\t\t!amountsRegExp.test(sortedCards);\n\t\t}, function (cards) {\n\t\t\treturn [cards.slice(0,3), cards.slice(3,6)];\n\t\t});\n\t},\n\n\t/** Serialization is used in the `toString()` method, but it is also vital for sending the game\n\tstate across a network or the marshalling between the rendering thread and a webworker.\n\t*/\n\t'static __SERMAT__': {\n\t\tidentifier: exports.__package__ +'.SubTruco',\n\t\tserializer: function serialize_SubTruco(obj) {\n\t\t\treturn [obj.table, obj.cardsHand, obj.cardsFoot];\n\t\t}\n\t}\n}); // declare Truco.\n\n// ## SubTruco type initialization #################################################################\n\n/** Sermat serialization.\n*/\nexports.__SERMAT__.include.push(SubTruco);\nSermat.include(exports);","/** # ChallengedTruco\n\nA complete (but of complete information) version of the _truco_ subgame, with challenges.\n*/\nvar ChallengedTruco = exports.ai.ChallengedTruco = declare(SubTruco, {\n\tname: 'ChallengedTruco',\n\n\t/** The constructo takes:\n\t+ `table`: An array with the cards on the table,\n\t+ `cardsHand`: An array with the cards on the first player's hand,\n    + `cardsFoot`: An array with the cards on the second player's hand.\n    + `globalScore`: An array with the current score of the players, regarding the global game of 30 points.\n\t*/\n\tconstructor: function ChallengedTruco(table, cardsHand, cardsFoot, globalScore) {\n\t\tSubTruco.call(this, table, cardsHand, cardsFoot);\n\t\tthis.globalScore = globalScore;\n\n\t\t // _Envido_ related\n\t\tthis.envidoStack = [];\n\t\tthis.envidoGoing = false; // TODO: Update envidoGoing when a challenge is raised/answered\n\n\t\t// _Truco_ related\n\t\tthis.trucoStack = [];\n\t\tthis.trucoGoing = false; // TODO: Update trucoGoing when a challenge is raised/answered\n\t\tthis.canUpChallenge = null; // A player that can up the challenge later\n\t},\n\n\t/** The players' roles in a ChallengedTruco match are `\"Hand\"` (_Mano_) and `\"Foot\"` (_Pie_).\n\t*/\n\tplayers: [\"Hand\", \"Foot\"],\n\n\t// ## Game logic ###############################################################################\n\n\t/** A move for `ChallengedTruco` can be either either the index of the card to be played in the\n    active player's hand or a challenge, as defined in 'static CHALLENGES'.\n    If there is a challenge currently proposed the moves are 0 or 1 as declining or accepting said\n    challenge.\n\t*/\n\tmoves: function moves() {\n\t\tvar envidoChall = this.getEnvidoChallenge();\n\t\tvar trucoChall = this.getTrucoChallenge();\n\n\t\tvar moves = SubTruco.prototype.moves.call(this);\n\n\t\tif (this.envidoGoing) {\n\t\t\tmoves[this.activePlayer()] = [\n\t\t\t\tChallengedTruco.CHALLENGES.Quiero,\n\t\t\t\tChallengedTruco.CHALLENGES.NoQuiero\n\t\t\t];\n\t\t\tArray.prototype.push.apply(moves[this.activePlayer()], this.envidoResponses());\n\t\t} else if (this.trucoGoing) {\n\t\t\tmoves[this.activePlayer()] = [\n\t\t\t\tChallengedTruco.CHALLENGES.Quiero,\n\t\t\t\tChallengedTruco.CHALLENGES.NoQuiero\n\t\t\t];\n\t\t\tArray.prototype.push.apply(moves[this.activePlayer()], this.trucoResponses());\n\t\t} else {\n\t\t\t// No challenges are in negotiation. Can raise new ones or play normally\n\t\t\tif (this.table.length < 2) {\n\t\t\t\tArray.prototype.push.apply(moves[this.activePlayer()], this.envidoResponses());\n\t\t\t}\n\n\t\t\tif (!trucoChall || this.canUpChallenge === this.activePlayer()) {\n\t\t\t\tArray.prototype.push.apply(moves[this.activePlayer()], this.trucoResponses());\n\t\t\t}\n\t\t}\n\t\treturn moves;\n\t},\n\n\t/** TODO\n\t*/\n\tresult: function result() {\n\t\treturn SubTruco.prototype.result.call(this);\n\t},\n\n\t/** TODO\n\t*/\n\tnext: function next(moves, haps, update) {\n\t\tvar activePlayer = this.activePlayer();\n\t\tvar move = +moves[activePlayer];\n\n\t\tif (move <= 2) {\n\t\t\treturn SubTruco.prototype.next.call(this, moves, haps, update);\n\t\t} else {\n\t\t\tvar that = update ? this : this.clone();\n\t\t\tvar envidoChallenge = that.getEnvidoChallenge();\n\t\t\tvar trucoChall = that.getTrucoChallenge();\n\n\t\t\tswitch (move) {\n\t\t\t\tcase ChallengedTruco.CHALLENGES.Quiero:\n\t\t\t\t\tif (envidoChallenge) {\n\t\t\t\t\t\tvar handEnvido = envidoTotal(that.cardsHand);\n\t\t\t\t\t\tvar footEnvido = envidoTotal(that.cardsFoot);\n\t\t\t\t\t\tvar envidoWinner = handEnvido >= footEnvido ? 'Hand' : 'Foot';\n\t\t\t\t\t\tvar envidoWinPoints = that.envidoStackWorth()[0];\n\t\t\t\t\t\tthat.envidoGoing = false;\n\t\t\t\t\t\t// TODO: (meeting) How are the different ENVIDO scores published\n\t\t\t\t\t\t// in Game.result()?\n\t\t\t\t\t} else if (trucoChall) {\n\t\t\t\t\t\tthat.trucoGoing = false;\n\t\t\t\t\t\tthat.canUpChallenge =\n\t\t\t\t\t\t\ttrucoChall != ChallgruengedTruco.CHALLENGES.ValeCuatro ? activePlayer : null;\n\t\t\t\t\t} else { /* IMPOSSIBLE */ }\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ChallengedTruco.CHALLENGES.NoQuiero:\n\t\t\t\t\tif (envidoChallenge) {\n\t\t\t\t\t\tthat.envidoGoing = false;\n\t\t\t\t\t\tvar envidoNotWantedPoints = that.envidoStackWorth()[1];\n\t\t\t\t\t\t// TODO: Assign score to the challenging player, game continues\n\t\t\t\t\t} else if (trucoChallenge) {\n\t\t\t\t\t\tthat.trucoGoing = false;\n\t\t\t\t\t\tvar challengerScore = that.trucoStackWorth() - 1;\n\t\t\t\t\t\t// TODO: Assign score to the challenging player, game over\n\t\t\t\t\t} else { /* IMPOSSIBLE */ }\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ChallengedTruco.CHALLENGES.Truco:\n\t\t\t\tcase ChallengedTruco.CHALLENGES.ReTruco:\n\t\t\t\tcase ChallengedTruco.CHALLENGES.ValeCuatro:\n\t\t\t\t\tthat.canUpChallenge = null;\n\t\t\t\t\tthat.trucoGoing = true;\n\t\t\t\t\tthat.trucoStack.push(move);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ChallengedTruco.CHALLENGES.Envido:\n\t\t\t\tcase ChallengedTruco.CHALLENGES.RealEnvido:\n\t\t\t\tcase ChallengedTruco.CHALLENGES.FaltaEnvido:\n\t\t\t\t\tthat.envidoGoing = true;\n\t\t\t\t\tthat.envidoStack.push(move);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn that;\n\t\t}\n\t},\n\n\t// ## Utility methods ##########################################################################\n\n\tclone: function clone() {\n\t\tvar cloned_game = new this.constructor(\n\t\t\tthis.table.slice(),\n\t\t\tthis.cardsHand.slice(),\n\t\t\tthis.cardsFoot.slice(),\n\t\t\tthis.globalScore);\n\n\t\tcloned_game.envidoStack = this.envidoStack.slice();\n\t\tcloned_game.trucoStack = this.trucoStack.slice();\n\n\t\treturn cloned_game;\n\t},\n\n\ttrucoStackWorth: function trucoStackWorth() {\n\t\treturn this.trucoStack.length + 1;\n\t\t// Truco: 2\n\t\t// Truco, ReTruco: 3\n\t\t// TRUCO; ReTruco, ValeCuatro: 4\n\t},\n\n\tgetEnvidoChallenge: function() {\n\t\treturn this.envidoStack[this.envidoStack.length - 1];\n\t},\n\n\tgetTrucoChallenge: function() {\n\t\treturn this.trucoStack[this.trucoStack.length - 1];\n\t},\n\n\t/**\n\t * When envido challenges are called their effect is cumulative. If an _Envido_ is answered to\n\t * with a _Real Envido_ then it is worth 5 (2 + 3) points. Not all sequences are allowed.\n\t * Below is the list of allowed _Envido_ type challenge chains, along with the points given to\n\t * the winner or when it is declined.\n\t *\n\t * E               2/1\n\t * RE              3/1\n\t * FE              x/1\n\t * E, E            4/2\n\t * E, RE           5/2\n\t * E, E, RE        7/4\n\t * E, E, RE, FE    x/7\n\t * E, FE           x/2\n\t * RE, FE          x/3\n\t * E, E, FE        x/4\n\t * E, RE, FE       x/5\n\t */\n\tenvidoStackWorth: function envidoStackWorth() {\n\t\tif (this.envidoStack.length) {\n\t\t\treturn null;\n\t\t}\n\t\tvar wanted = 1;\n\t\tvar notWanted = 0;\n\t\tfor (var i = 0; i < this.envidoStack.length; i++) {\n\t\t\tnotWanted = wanted;\n\t\t\tswitch (this.envidoStack[i]) {\n\t\t\t\tcase ChallengedTruco.CHALLENGES.Envido:\n\t\t\t\t\twanted += 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase ChallengedTruco.CHALLENGES.RealEnvido:\n\t\t\t\t\tnotWanted = wanted;\n\t\t\t\t\twanted += 3;\n\t\t\t\t\tbreak;\n\t\t\t\tcase ChallengedTruco.CHALLENGES.FaltaEnvido:\n\t\t\t\t\treturn [this.faltaEnvidoScore(), notWanted];\n\t\t\t}\n\t\t}\n\t\treturn [wanted, notWanted];\n\t},\n\n\tenvidoResponses: function envidoResponses() {\n\t\tvar envidoChall = this.getEnvidoChallenge();\n\t\tvar possibleMoves = [];\n\n\t\tif (!envidoChall || envidoChall < ChallengedTruco.CHALLENGES.FaltaEnvido) {\n\t\t\tpossibleMoves.push(ChallengedTruco.CHALLENGES.FaltaEnvido);\n\t\t}\n\n\t\tif (!envidoChall || envidoChall < ChallengedTruco.CHALLENGES.RealEnvido) {\n\t\t\tpossibleMoves.push(ChallengedTruco.CHALLENGES.RealEnvido);\n\t\t}\n\n\t\tif (!envidoChall || envidoChall < ChallengedTruco.CHALLENGES.Envido) {\n\t\t\tpossibleMoves.push(ChallengedTruco.CHALLENGES.Envido);\n\t\t}\n\n\t\tif (envidoChall === ChallengedTruco.CHALLENGES.Envido && this.envidoStack.length === 1) {\n\t\t\tpossibleMoves.push(ChallengedTruco.CHALLENGES.Envido);\n\t\t}\n\n\t\treturn possibleMoves;\n\t},\n\n\ttrucoResponses: function trucoResponses() {\n\t\tvar trucoChall = this.getTrucoChallenge();\n\n\t\tswitch (trucoChall) {\n\t\t\tcase ChallengedTruco.CHALLENGES.Truco:\n\t\t\t\treturn [ChallengedTruco.CHALLENGES.ReTruco];\n\t\t\tcase ChallengedTruco.CHALLENGES.ReTruco:\n\t\t\t\treturn [ChallengedTruco.CHALLENGES.ValeCuatro];\n\t\t\tdefault:\n\t\t\t\treturn [ChallengedTruco.CHALLENGES.Truco];\n\t\t}\n\t},\n\n\t/**\n\t * The _Falta Envido_ challenge depends on the global game status. If both players are in\n\t * _malas_ (up to 15 points each), the player that wins the _Falta Envido_ wins the  global\n\t * game. If at least one player is above 15 points this challenge is worth the amount of points\n\t * necessary for the winning player to win the global game.\n\t */\n\tfaltaEnvidoScore: function faltaEnvidoScore() {\n\t\tvar handGlobal = this.globalScore[0];\n\t\tvar footGlobal = this.globalScore[1];\n\t\tif (handGlobal <= 15 && footGlobal <= 15) {\n\t\t\tif (this.activePlayer() === 'Hand') {\n\t\t\t\treturn 30 - handGlobal;\n\t\t\t} else {\n\t\t\t\treturn 30 - footGlobal;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 30 - Math.max(handGlobal, footGlobal);\n\t\t}\n\t},\n\n    /**\n\n     */\n\t'static CHALLENGES': {\n\t\t'Truco': 3,\n\t\t'ReTruco': 4,\n\t\t'ValeCuatro': 5,\n\t\t'Envido': 6,\n\t\t'RealEnvido': 7,\n\t\t'FaltaEnvido': 8,\n\t\t'Quiero': 9,\n\t\t'NoQuiero': 10\n\t},\n\n\n\t/** Serialization is used in the `toString()` method, but it is also vital for sending the game\n\tstate across a network or the marshalling between the rendering thread and a webworker.\n\t*/\n\t'static __SERMAT__': {\n\t\tidentifier: exports.__package__ + '.ChallengedTruco',\n\t\tserializer: function serialize_Mancala(obj) {\n\t\t\treturn [obj.activePlayer()];\n\t\t}\n\t}\n}); // declare ChallengedTruco.\n\n// ## ChallengedTruco type initialization ####################################################################\n\n/** Sermat serialization.\n*/\nexports.__SERMAT__.include.push(ChallengedTruco);\nSermat.include(exports);\n","// See __prologue__.js\n\tSermat.include(exports);\n\t\n\treturn exports;\n}\n"]}